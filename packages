#!/usr/bin/env bash

echo; echo
echo "####################"
echo "Install packages"
echo "####################"
echo; echo

# Select video drivers
echo "####################"
echo "What video drivers install?"
echo "1) xf86-video-intel      -> for Intel"
echo "2) xf86-video-amdgpu     -> for AMD"
echo "3) xf86-video-nouveau    -> for nVidea"
echo "4) xf86-video-ati        -> for ATI"
echo "other) xf86-video-fbdev  -> other driver"
echo "####################"

read -n1 -p">" drivers; echo
if [[ $drivers == "1" ]]; then
    drivers="xf86-video-intel"
elif [[ $drivers == "2" ]]; then
    drivers="xf86-video-amdgpu"
elif [[ $drivers == "3" ]]; then
    drivers="xf86-video-nouveau"
elif [[ $drivers == "4" ]]; then
    drivers="xf86-video-ati"
else
    drivers="xf86-video-fbdev"
fi

# check kernel for install headers
kernel=`pacman -Qe linux 2>/dev/null | grep -o "^linux"`
kernel=`echo $kernel | sed -E 's/([a-z\-]+)/\1-headers/'`
kernel_lts=`pacman -Qe linux-lts 2>/dev/null | grep -o "^linux-lts"`
kernel_lts=`echo $kernel_lts | sed -E 's/([a-z\-]+)/\1-headers/'`
kernel_zen=`pacman -Qe linux-zen 2>/dev/null | grep -o "^linux-zen"`
kernel_zen=`echo $kernel_zen | sed -E 's/([a-z\-]+)/\1-headers/'`
kernel_hardened=`pacman -Qe linux-hardened 2>/dev/null | grep -o "^linux-hardened"`
kernel_hardened=`echo $kernel_hardened | sed -E 's/([a-z\-]+)/\1-headers/'`
headers=`echo "$kernel $kernel_lts $kernel_zen $kernel_hardened"`

###############

# Select Desktop Environment
while [[ $de != "1" ]] && [[ $de != "2" ]] && [[ $de != "3" ]] && [[ $de != "4" ]]\
   && [[ $de != "5" ]] && [[ $de != "6" ]] && [[ $de != "7" ]] && [[ $de != "8" ]]\
   && [[ $de != "9" ]] && [[ $de != "10" ]] && [[ $de != "11" ]]\
   && [[ $de != "12" ]] && [[ $de != "13" ]] && [[ $de != "14" ]]; do
    echo; echo
    echo "####################"
    echo "What Desktop Environment install?"
    echo "1) Openbox settings by Koljasha"
    echo "2) i3wm settings by Koljasha"
    echo "3) Qtile settings by Koljasha"
    echo "4) Xfce default settings"
    echo "5) Lxde default settings"
    echo "6) Lxqt default settings"
    echo "7) Enlightenment default settings"
    echo "8) Mate default settings"
    echo "9) Cinnamon default settings"
    echo "10) Gnome default settings"
    echo "11) Budgie default settings"
    echo "12) Pantheon default settings"
    echo "13) Kde Plasma default settings"
    echo "14) Deepin default settings"
    echo "####################"
    read -p">" de
done
echo; echo

if [[ $de == "1" ]]; then
    de="koljasha_openbox"
elif [[ $de == "2" ]]; then
    de="koljasha_i3wm"
elif [[ $de == "3" ]]; then
    de="koljasha_qtile"
elif [[ $de == "4" ]]; then
    de="xfce"
elif [[ $de == "5" ]]; then
    de="lxde"
elif [[ $de == "6" ]]; then
    de="lxqt"
elif [[ $de == "7" ]]; then
    de="efl"
elif [[ $de == "8" ]]; then
    de="mate"
elif [[ $de == "9" ]]; then
    de="cinnamon"
elif [[ $de == "10" ]]; then
    de="gnome"
elif [[ $de == "11" ]]; then
    de="budgie"
elif [[ $de == "12" ]]; then
    de="pantheon"
elif [[ $de == "13" ]]; then
    de="kde"
elif [[ $de == "14" ]]; then
    de="deepin"
fi
echo "Ok"

###############

# Packages

packages="
$drivers $headers reflector
dosfstools mtools net-tools man-db man-pages xdg-user-dirs trash-cli bash-completion ntfs-3g gvfs gvfs-mtp wmctrl xclip
git htop bashtop lm_sensors upower smartmontools lesspipe pkgfile numlockx wget curl cmake ctags neofetch highlight fzf
atool p7zip unrar unzip zip
openssh freerdp rsync
openvpn networkmanager-openvpn wireguard-tools systemd-resolvconf
xorg xorg-xinit accountsservice
pipewire wireplumber pipewire-alsa pipewire-pulse
fish tmux ranger vim
terminator alacritty
imagemagick ffmpeg
gsfonts ttf-droid ttf-dejavu ttf-liberation awesome-terminal-fonts ttf-nerd-fonts-symbols
xcursor-vanilla-dmz xcursor-vanilla-dmz-aa
arc-gtk-theme adapta-gtk-theme breeze-gtk
arc-icon-theme breeze-icons
archlinux-wallpaper
firefox
"

if [[ $de == "koljasha_openbox" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    openbox obconf menumaker plank polybar
    polkit-gnome lxappearance-gtk3 picom feh zenity
    gvim gsimplecal
    dmenu rofi jgmenu i3lock dunst
    neovim npm
    qutebrowser torbrowser-launcher
    pcmanfm-gtk3
    baobab file-roller gnome-screenshot gnome-calculator gnome-terminal
    remmina samba x11vnc libvncserver
    vlc
    "
elif [[ $de == "koljasha_i3wm" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    i3 polybar
    polkit-gnome lxappearance-gtk3 picom feh zenity
    gvim gsimplecal
    dmenu rofi jgmenu i3lock dunst
    neovim npm
    qutebrowser torbrowser-launcher
    pcmanfm-gtk3
    baobab file-roller gnome-screenshot gnome-calculator gnome-terminal
    remmina samba x11vnc libvncserver
    vlc
    "
elif [[ $de == "koljasha_qtile" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    qtile
    polkit-gnome lxappearance-gtk3 picom feh zenity
    gvim gsimplecal
    dmenu rofi jgmenu i3lock dunst
    neovim npm
    qutebrowser torbrowser-launcher
    pcmanfm-gtk3
    baobab file-roller gnome-screenshot gnome-calculator gnome-terminal
    remmina samba x11vnc libvncserver
    vlc
    "
elif [[ $de == "xfce" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    xfce4 xfce4-goodies
    galculator engrampa gst-libav
    "
elif [[ $de == "lxde" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    lxde-gtk3 obconf picom
    l3afpad galculator gnome-screenshot xarchiver gpicview mpv
    "
elif [[ $de == "lxqt" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted network-manager-applet
    qt5ct qt6ct kvantum

    lxqt picom xsettingsd
    transmission-qt featherpad galculator vlc
    "
elif [[ $de == "efl" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol transmission-gtk
    qt5ct qt6ct kvantum

    enlightenment terminology connman
    l3afpad galculator xarchiver gpicview mpv
    "
elif [[ $de == "mate" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    mate mate-extra celluloid
    "
elif [[ $de == "cinnamon" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    gparted pavucontrol network-manager-applet transmission-gtk
    qt5ct qt6ct kvantum

    cinnamon cinnamon-translations x-apps
    gnome-calculator gnome-screenshot file-roller gthumb celluloid
    "
elif [[ $de == "gnome" ]]; then
    packages="
    $packages
    gnome gnome-extra
    "
elif [[ $de == "budgie" ]]; then
    packages="
    $packages
    budgie-desktop budgie-desktop-view budgie-screensaver
    gnome network-manager-applet
    "
elif [[ $de == "pantheon" ]]; then
    packages="
    $packages
    pantheon gdm
    "
elif [[ $de == "kde" ]]; then
    packages="
    $packages
    plasma plasma-wayland-session kde-applications
    "
elif [[ $de == "deepin" ]]; then
    packages="
    $packages
    lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
    deepin deepin-extra
    "
fi

# Other packages:
# pulseaudio pulseaudio-alsa - previous sound server

# xreader, atril - document viewer

# wine winetricks - for windows applications
# bottles - bottles for windows applications
# lutris gamemode lib32-gamemode - for windows games
# Drivers: https://github.com/lutris/docs/blob/master/InstallingDrivers.md

# gnome-boxes - virtual machines
# virtualbox - virtual machines
# (choose virtualbox-host-modules-arch for linux kernel)
# (choose virtualbox-host-dkms for linux-lts, linux-zen, linux-hardened kernel)

# libreoffice-still libreoffice-still-ru - office

packages_aur="
xkb-switch
"

if [[ $de == "koljasha_openbox" ]]; then
    packages_aur="
    $packages_aur
    arc-dark-osx-openbox-theme-git
    mint-x-icons
    "
elif [[ $de == "koljasha_i3wm" ]]; then
    packages_aur="
    $packages_aur
    mint-x-icons
    "
elif [[ $de == "koljasha_qtile" ]]; then
    packages_aur="
    $packages_aur
    mint-x-icons
    "
fi

# Other packages:
# mintstick - write Iso to Usb
# ventoy-bin - write Iso to Usb
# bottles - manage wine prefix

###############

# change|check folder
cd ~/archlinux

# Install packages from repo
sudo pacman -Syu --noconfirm
sudo pacman -S --needed --noconfirm $packages

# build yay
git clone https://aur.archlinux.org/yay-bin.git
cd yay-bin && makepkg -sirc --noconfirm
cd .. && rm -rf yay-bin

# Install packages from aur
yay -S --noconfirm $packages_aur

###############

# now error when start lxappearance -> del this app
if [[ $de == "lxde" ]]; then
    sudo pacman -Rsn --noconfirm lxappearance-obconf-gtk3
fi

###############

username=`whoami`

###############

# Copy configs

cp files/profile ~/.profile
cp files/bashrc ~/.bashrc
cp files/tmux.conf ~/.tmux.conf
cp files/vimrc ~/.vimrc
if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    cp files/gvimrc ~/.gvimrc
fi

mkdir ~/.ssh
cp files/ssh_config ~/.ssh/config
mkdir ~/.gnupg
cp files/gpg.conf ~/.gnupg/gpg.conf

mkdir -p ~/.local/share/applications

if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    # ~/.config
    mkdir -p ~/.config
    cp -r config/* ~/.config/

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf

    # config services
    sudo cp files/sudo_openvpn /etc/sudoers.d/openvpn
    sudo cp files/sudo_pacman /etc/sudoers.d/pacman
    sudo cp files/sudo_wireguard /etc/sudoers.d/wireguard
    sudo sed -i "s/username/${username}/" /etc/sudoers.d/openvpn
    sudo sed -i "s/username/${username}/" /etc/sudoers.d/pacman
    sudo sed -i "s/username/${username}/" /etc/sudoers.d/wireguard

    sudo cp files/smb.conf /etc/samba/smb.conf

    sudo mkdir /etc/systemd/system/x11vnc.service.d
    sudo cp files/x11vnc.conf /etc/systemd/system/x11vnc.service.d/override.conf

    # copy desktop icons
    sudo cp files/badge/i3_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/i3_badge-symbolic.svg
    sudo cp files/badge/openbox_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/openbox_badge-symbolic.svg
    sudo cp files/badge/qtile_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/qtile_badge-symbolic.svg
    sudo gtk-update-icon-cache /usr/share/icons/hicolor

    # gnome-screenshot settings
    gsettings set org.gnome.gnome-screenshot auto-save-directory "file:///home/$username/Загрузки/"

    # backgrounds
    sudo rm /usr/share/backgrounds/archlinux/archlinux.stw
    sudo rm /usr/share/backgrounds/archlinux/archbtw.png

    # correct feh.desktop
    sudo sed -i 's/Exec=feh --start-at %u/Exec=feh --title "feh [%%u of %%l] - %%F - %%wx%%h:%%S" --scale-down --start-at %f/' /usr/share/applications/feh.desktop
    cp /usr/share/applications/feh.desktop ~/.local/share/applications/

    # mime cache for feh, qutebrowser
    cp files/mimeinfo.cache ~/.local/share/applications/

    # jgmenu Exit for user
    sed -i "s/username/$username/" ~/.config/jgmenu/append.csv

    # terminator size for i3
    sudo cp files/terminator /usr/local/bin/terminator

    # terminator for plank
    sed -i "s/username/$username/" ~/.config/plank/dock1/launchers/terminator.dockitem

    if [[ $de == "koljasha_openbox" ]]; then
        # menu_maker for Openbox
        ~/.config/openbox/menu_maker.sh
    fi
elif [[ $de == "xfce" ]]; then
    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "lxde" ]]; then
    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # enable picom autostart
    sudo cp /usr/share/applications/picom.desktop /etc/xdg/autostart/picom.desktop

    # delete openbox session from display manager
    sudo mv /usr/share/xsessions/openbox.desktop /usr/share/xsessions/openbox.desktop.hide
    sudo mv /usr/share/xsessions/openbox-kde.desktop /usr/share/xsessions/openbox-kde.desktop.hide

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "lxqt" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # QT Environment
    mkdir ~/.config/lxqt
    cp files/lxqt_session.conf ~/.config/lxqt/session.conf

    # enable picom autostart
    sudo cp /usr/share/applications/picom.desktop /etc/xdg/autostart/picom.desktop

    # copy desktop icons
    sudo cp files/badge/lxqt_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/lxqt_badge-symbolic.svg
    sudo gtk-update-icon-cache /usr/share/icons/hicolor

    # delete openbox session from display manager
    sudo mv /usr/share/xsessions/openbox.desktop /usr/share/xsessions/openbox.desktop.hide
    sudo mv /usr/share/xsessions/openbox-kde.desktop /usr/share/xsessions/openbox-kde.desktop.hide

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "efl" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "mate" ]]; then
    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "cinnamon" ]]; then
    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/qt5ct ~/.config/qt5ct
    cp -r config/qt6ct ~/.config/qt6ct

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # copy desktop icons
    sudo cp files/badge/cinnamon_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/cinnamon_badge-symbolic.svg
    sudo cp files/badge/cinnamon_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/cinnamon2d_badge-symbolic.svg
    sudo gtk-update-icon-cache /usr/share/icons/hicolor

    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
elif [[ $de == "gnome" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty
elif [[ $de == "budgie" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty
elif [[ $de == "pantheon" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty
elif [[ $de == "kde" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # config sddm
    sudo mkdir /etc/sddm.conf.d
    sudo cp files/sddm_avatar.conf /etc/sddm.conf.d/avatar.conf
    sudo cp files/username.png /var/lib/AccountsService/icons/${username}
elif [[ $de == "deepin" ]]; then
    rm ~/.profile

    # ~/.config
    mkdir -p ~/.config

    cp -r config/fish ~/.config/fish
    rm -rf ~/.config/fish/functions/samba-server.fish

    cp -r config/htop ~/.config/htop
    cp -r config/ranger ~/.config/ranger
    cp -r config/terminator ~/.config/terminator
    cp -r config/alacritty ~/.config/alacritty

    # copy desktop icons
    sudo cp files/badge/deepin_badge-symbolic.svg /usr/share/icons/hicolor/scalable/places/deepin_badge-symbolic.svg
    sudo gtk-update-icon-cache /usr/share/icons/hicolor

    # enable lightdm-gtk-greeter
    sudo sed -i 's/#greeter-session=example-gtk-gnome/greeter-session=lightdm-gtk-greeter/' /etc/lightdm/lightdm.conf
    # config lightdm
    sudo cp files/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf
    # enable numlockx in lightdm
    sudo sed -i 's/#greeter-setup-script=/greeter-setup-script=\/usr\/bin\/numlockx on/' /etc/lightdm/lightdm.conf
fi

###############

# copy image for lightdm & i3lock
sudo cp files/archlinux.png /usr/share/backgrounds/archlinux.png

# icon for user
sudo cp files/username.png /var/lib/AccountsService/icons/${username}.png
sudo cp files/username /var/lib/AccountsService/users/${username}
sudo sed -i "s/username/${username}/" /var/lib/AccountsService/users/${username}

# makepkg settings
sudo sed -i 's/#MAKEFLAGS/MAKEFLAGS/' /etc/makepkg.conf

# timeoutstop in systemd
sudo sed -i 's/#DefaultTimeoutStopSec=.*/DefaultTimeoutStopSec=10s/' /etc/systemd/system.conf

# systemd journal size
sudo sed -i 's/#SystemMaxUse=/SystemMaxUse=512M/' /etc/systemd/journald.conf

# terminator max window
sudo sed -i "s/^Exec=terminator/Exec=terminator -m/" /usr/share/applications/terminator.desktop
cp /usr/share/applications/terminator.desktop ~/.local/share/applications/

# enable change locale
sudo localectl --no-convert set-x11-keymap us,ru "" "" grp:alt_shift_toggle

# ranger icons
git clone https://github.com/cdump/ranger-devicons2 ~/.config/ranger/plugins/devicons2

###############

# install Vim-plug
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# install vim spell RU UTF-8
# curl -fLo ~/.vim/spell/ru.utf-8.sug --create-dirs http://ftp.vim.org/vim/runtime/spell/ru.utf-8.sug
# curl -fLo ~/.vim/spell/ru.utf-8.spl --create-dirs http://ftp.vim.org/vim/runtime/spell/ru.utf-8.spl
echo; echo
echo "####################"
echo "After install Vim plugins"
echo "for exit Vim do :qa"
echo "####################"
echo "now click any key"
echo "####################"
read -n1 -p">"; echo
# install vim plugins
vim -c PlugInstall
echo; echo
# enable vim colorscheme
sed -i 's/desert/PaperColor/' ~/.vimrc

# gvim -> evim
if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    sudo cp /usr/share/applications/gvim.desktop /usr/share/applications/evim.desktop
    sudo sed -i "s/GVim/eVim/" /usr/share/applications/evim.desktop
    sudo sed -i "s/gvim -f/gvim -y -f/" /usr/share/applications/evim.desktop
fi

# plugins for Neovim
if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    sudo npm i -g pyright
    sudo npm i -g bash-language-server
    sudo npm i -g emmet-ls

    # install nvim plugins
    nvim -c PlugInstall
fi
###############

# install oh-my-fish
git clone https://github.com/oh-my-fish/oh-my-fish
oh-my-fish/bin/install --noninteractive --offline
# install theme for fish
fish -c 'omf install agnoster'
# install fzf plugins
fish -c 'omf install fzf'
fish -c 'set -U FZF_LEGACY_KEYBINDINGS 0; set -U FZF_PREVIEW_DIR_CMD "ls -lah"; set -U FZF_PREVIEW_FILE_CMD "head -n 20"; set -U FZF_COMPLETE 2'
cp files/fzf.fish ~/.local/share/omf/pkg/fzf/conf.d/fzf.fish
cp files/fzf_complete.fish ~/.local/share/omf/pkg/fzf/functions/__fzf_complete.fish
# clean oh-my-fish
rm -rf ~/archlinux/oh-my-fish
# exit status in fish agnoster theme
sed -i 's/✘/✘ $RETVAL'/ ~/.local/share/omf/themes/agnoster/functions/fish_prompt.fish
# fish is main shell
sudo chsh -s /usr/bin/fish $username
# fish editor
fish -c 'set -U EDITOR vim'
# update fish
fish -c 'fish_update_completions'

###############

# # install miniconda
# while [[ $mconda != "1" ]] && [[ $mconda != "2" ]]; do
    # echo; echo
    # echo "####################"
    # echo "Install miniconda"
    # echo "1) yes"
    # echo "2) no"
    # echo "####################"
    # read -n1 -p">" mconda
# done
# echo; echo

# if [[ $mconda == "1" ]]; then
    # curl -o miniconda https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    # bash miniconda -p ~/.local/conda -b 2>/dev/null
    # ~/.local/conda/bin/conda update --all --yes

    # sed -i "s/# alias conda.update/alias conda.update/" ~/.bashrc
    # cp files/conda.update.fish ~/.config/fish/functions/conda.update.fish

    # echo "set PATH /home/$username/.local/conda/bin \$PATH" >> ~/.config/fish/config.fish
    # echo "" >> ~/.config/fish/config.fish

    # rm miniconda
# fi
# echo "Ok"

###############

if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]] \
|| [[ $de == "lxde" ]] || [[ $de == "lxqt" ]]; then
    # picom settings
    while [[ $vvsync != "1" ]] && [[ $vvsync != "2" ]]; do
        echo; echo
        echo "####################"
        echo "Disable Vsync (this enable transparency for me in VirtualBox)"
        echo "1) no"
        echo "2) yes"
        echo "####################"
        read -n1 -p">" vvsync
    done
    echo; echo

    if [[ $vvsync == "2" ]]; then
        sudo sed -i 's/^# vsync = false/vsync = false/' /etc/xdg/picom.conf
        sudo sed -i 's/^vsync = true/# vsync = true/' /etc/xdg/picom.conf
    fi
    echo "Ok"
fi

###############

# Enable services
if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]] \
|| [[ $de == "xfce" ]] || [[ $de == "lxde" ]] || [[ $de == "lxqt" ]] \
|| [[ $de == "mate" ]] || [[ $de == "cinnamon" ]] || [[ $de == "deepin" ]]; then
    sudo systemctl enable lightdm.service
elif [[ $de == "efl" ]]; then
    sudo systemctl enable lightdm.service
    sudo systemctl disable NetworkManager.service
    sudo systemctl enable connman.service
elif [[ $de == "gnome" ]] || [[ $de == "budgie" ]] || [[ $de == "pantheon" ]]; then
    sudo systemctl enable gdm.service
elif [[ $de == "kde" ]]; then
    sudo systemctl enable sddm.service
fi

sudo systemctl enable pkgfile-update.timer
sudo systemctl start pkgfile-update.service

# pacman-mirrorlist settings
while [[ $mlist != "1" ]] && [[ $mlist != "2" ]]; do
    echo; echo
    echo "####################"
    echo "What pacman-mirrorlist use"
    echo "1) global pacman mirrorlist"
    echo "2) reflector for update"
    echo "####################"
    read -n1 -p">" mlist
done
echo; echo

if [[ $mlist == "1" ]]; then
    sudo curl -o /etc/pacman.d/mirrorlist https://archlinux.org/mirrorlist/all/
    sudo sed -i '7,8s/#Server/Server/' /etc/pacman.d/mirrorlist
    sudo pacman -Syu --needed --noconfirm pacman-mirrorlist
else
    sudo systemctl enable reflector.timer
fi
echo "Ok"


if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    # Update Arch packages with yay
    systemctl --user enable yay_update.timer
fi

###############

if [[ $de == "koljasha_openbox" ]] || [[ $de == "koljasha_i3wm" ]] || [[ $de == "koljasha_qtile" ]]; then
    # enable change backgrounds
    while [[ $chbg != "1" ]] && [[ $chbg != "2" ]]; do
        echo; echo
        echo "####################"
        echo "Enable change backgrounds"
        echo "1) yes"
        echo "2) no"
        echo "####################"
        read -n1 -p">" chbg
    done
    echo; echo

    if [[ $chbg == "1" ]]; then
        systemctl --user enable setbg.timer
    fi
    echo "Ok"

    ###############

    # enable samba share for user
    while [[ $smb != "1" ]] && [[ $smb != "2" ]]; do
        echo; echo
        echo "####################"
        echo "Enable Samba share \"Home directory\" for $username"
        echo "1) yes"
        echo "2) no"
        echo "####################"
        read -n1 -p">" smb
    done
    echo; echo

    if [[ $smb == "1" ]]; then
        echo "Password Samba share for $username"
        sudo smbpasswd -a $username
        sudo systemctl enable smb.service
    fi
    echo "Ok"

    ###############

    # enable x11vnc server
    while [[ $vnc != "1" ]] && [[ $vnc != "2" ]]; do
        echo; echo
        echo "####################"
        echo "Enable X11VNC Server"
        echo "1) yes"
        echo "2) no"
        echo "####################"
        read -n1 -p">" vnc
    done
    echo; echo

    if [[ $vnc == "1" ]]; then
        sudo systemctl enable x11vnc.service
    fi
    echo "Ok"
fi

###############

# end update settings

# clean yay
yay -Yc --noconfirm

# rm installer folder
echo; echo
echo "####################"
echo "Delete installer folder '~/archlinux' ?"
echo "1) no"
echo "other) yes"
echo "####################"

read -n1 -p">" rminstall; echo
if [[ $rminstall != "1" ]]; then
    rm -rf ~/archlinux
fi

###############

echo; echo
echo "####################"
echo "System installed"
echo "will be reboot"
echo "####################"
echo "now click any key"
echo "####################"
read -n1 -p">"; echo

sudo systemctl -i reboot

###############

