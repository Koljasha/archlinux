" ----------------------------------------
" vimrc by Koljasha
" ----------------------------------------

" Основные настройки
" ---------------

" убираем совместимость с vi
set nocompatible

" 256 цветов
set t_Co=256

" мышь во всех режимах
set mouse=a

" автоматически обновлять файл при его изменении
set autoread

" отключение бекапов
set nobackup

" отключение swap-файлы
set noswapfile

" не выгружать буфер, когда переключаемся на другой файл
set hidden

" определение типа файла
filetype plugin indent on

" подсветка синтаксиса
syntax on

" цветовая схема - (через плагин)
set background=dark

" нумерация строк
set number

" показывать относительные номера строк
set relativenumber

" показывать имя буфера в заголовке терминала
set title

" показывать строку с позицией курсора
set ruler

" включаем отображение команды
set showcmd

" включить подсветку невидимых символов
set list

" табы и пробелы
set listchars=trail:.,tab:--

" 4 пробела на tab
set expandtab
set tabstop=4

" размер сдвига при нажатии на клавиши "<" и ">"
set shiftwidth=4

" включаем умную автоматическую расстановку отступов
set smartindent

" наследовать отступы предыдущей строки
set autoindent

" всегда показывать строку статуса
set laststatus=2

" показывать строку вкладок всегда
set showtabline=2

" включаем перенос строк
set wrap

" перенос по словам, а не по буквам
set linebreak

" автозавершение команд в командной строке
set wildmenu
set wcm=<TAB>

" подсветка поиска
set hlsearch

" автопоиск первого совпадения
set incsearch

" игнорировать регистр букв при поиске
set ignorecase

" кодировка по умолчанию
set encoding=utf-8
set termencoding=utf-8

" :vsplit открывает окна справа
set splitright

" :split открывает окна снизу
set splitbelow

" для корректной работы Vim в Alacritty(ctrl+left|right)
if !has('nvim')
	set term=xterm-256color
endif

" линия по колонке
" set colorcolumn=120

" .vimrc из каталога запуска
" set exrc
" set secure

" показывать первую парную скобку после ввода второй
" set showmatch

" подсветка текущей строки
" set cursorline
" highlight cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

" описание строки статуса
" set statusline=%<%r%m\ %f:%y\ %=\ %-15(%l,%c:%v\ %p%%%)
" set statusline+=\ %{strftime(\"%H:%M\ %d.%m.%Y\ %a\")}

" вывести весь список сразу доступных вариантов
" set wildmode=list:longest,full

" останавливать поиск при достижении конца файла
" set nowrapscan

" список кодировок файлов для авто-определения
" set fileencodings=utf-8,koi8-r,cp1251,cp866

" сворачивание на основании отступов в начале строк
" set foldmethod=indent

" ----------------------------------------
" ----------------------------------------

" Горячие клавиши
" ---------------

" меняем mapleader на ",", по умолчанию - "\"
let mapleader=","
" устанавливаем задержку после нажатия
set timeoutlen=5000 ttimeoutlen=0

" help по слову при нажатии K
let &keywordprg=':help'

" <Leader><space> - отключение подсветки поиска hlsearch
nmap <Leader><space> :nohlsearch <CR>

" <Leader>ss - сохранение файла
nmap <Leader>ss :w! <CR>

" <Leader>qq - закрытие буфера без сохранения
nmap <Leader>qq :bd! <CR>

" <Leader>bb - следующий буфер
nmap <Leader>bb :bn <CR>
" <Leader>BB - предыдущий буфер
nmap <Leader>BB :bp <CR>

" копировать в системный буфер обмена
" выделить, далее "+y
vmap <C-c> "+y
" вставить из системного буфера обмена
" Ctrl-Shift-v
" вставить из буфера vim  в режиме вставки: Ctrl-r + "

" vsplit|split
nmap <Leader>vv :vsplit
nmap <Leader>vs :split

" vsplit|split по номеру буфера
nmap <Leader>VV :vertical sb
nmap <Leader>VS :sb

" сменить split
nmap <C-Right> <C-W>l
nmap <C-Left> <C-W>h
nmap <C-Up> <C-W>k
nmap <C-Down> <C-W>j

" изменить размера split
nmap <C-S-Right> <C-W>>
nmap <C-S-Left> <C-W><
nmap <C-S-Up> <C-W>+
nmap <C-S-Down> <C-W>-

" перемещение стрелками в командном режиме
cnoremap <Down> <C-n>
cnoremap <Up> <C-p>

" F4 - ражим вставки (Paste)
nmap <F4> :set paste! <CR>
imap <F4> <Esc> :set paste! <CR>

" F5 - сохранение файла
nmap <F5> :w! <CR>
imap <F5> <Esc> :w! <CR>
" Shift-F5 - сохранить с sudo
nmap <S-F5> :execute ':silent w !sudo tee % > /dev/null' <bar> :edit! <CR>

" F6 - сохранить свертки
" nmap <F6> :mkview <CR>
" Shift-F6 - загрузить свертки
" nmap <S-F6> :loadview <CR>

" F7 - показать пробелы и табы
nmap <F7> :set list! <CR>
" Shift-F7 - использовать табы вместо пробелов
nmap <S-F7> :set noet! <CR>

" F8 - отключение нумерации
nmap <F8> :set number! relativenumber! <CR>
" Shift-F8 - относительная нумерация
nmap <S-F8> :set relativenumber! <CR>

" F9 - отключение мыши
nmap <F9> :set mouse= <CR>
" Shift-F9 - включение мыши
nmap <S-F9> :set mouse=a <CR>

" F11 - проверка орфографии
" map <F11> :setlocal spelllang=ru spell! <CR>
" ]s - следующее слово с ошибкой
" [s - предыдущее слово с ошибкой
" z= - замена из списка
" zg - добавить в словарь
" zw - убрать из словаря
" zG - игнорировать слово

" ----------------------------------------
" ----------------------------------------

"  Terminal
" ---------------
if has('nvim')
	nmap <leader>tt :split term://fish <CR> :startinsert <CR>
	nmap <leader>tv :vsplit term://fish <CR> :startinsert <CR>
else
	nmap <leader>tt :terminal <CR>
	nmap <leader>tv :vertical terminal <CR>
endif
" ctrl-\ + ctrl-n - выйти из terminal -> на Esc
tnoremap <Esc> <C-\><C-n>
" ----------------------------------------

" Explore
" ---------------
" встроенный проводник :Exp :Rex :Tex :Lex :Vex :Sex
" gn - сделать каталог корнем
" ctrl-l - обновить каталог
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
let g:netrw_browse_split = 0
let g:netrw_liststyle = 3
" let g:netrw_preview   = 1
" let g:netrw_alto = 0
" let g:netrw_winsize   = 30
noremap <leader>oo :Exp <CR>
noremap <leader>OO :Vex <CR>

" ----------------------------------------
" ----------------------------------------

" Плагины
" ---------------
" Vim-plug - менеджер плагинов

" ---------------
" PaperColor - цветовая схема
" Lightline-Bufferline - отображение буферов в Lightline
" Lightline - строка статуса
" Vim-Devicons - иконки Nerd
" CSS Color - цвета css

" Startify - стартовый экран
" NERD Tree - файловый менеджер
" MRU - последние открытые файлы
" Buffer Explorer - переключение открытых буферов
" FZF - нечеткий поиск

" Auto Pairs - парные скобки и ковычки
" NERD Commenter - комментирование для различных языков

" EasyMotion - простые перемещения
" Tagbar - окно-список тегов
" Repeat - расширенный повтор по "."
" Supertab - дополнение по <Tab>
" Matchit - перемещение по тегам HTML (%) (для HTML)
" Matchtag - подсветка тегов HTML (для HTML)

" Polyglot - коллекция языковых пакетов для Vim
" Xkbswitch - смена на En при переходе в командный режим
"
" ----------------------------------------
" IDE
" ----------------------------------------
" IDE for Vim
" ----------------------------------------
" IDE for Neovim
" ----------------------------------------
" ----------------------------------------

" Vim-plug - менеджер плагинов
" ---------------
" https://github.com/junegunn/vim-plug
" Reload .vimrc and :PlugInstall to install plugins
" --------------

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')
" ----------------------------------------
" ----------------------------------------

" PaperColor - цветовая схема
" ---------------
" https://github.com/NLKNguyen/papercolor-theme
Plug 'nlknguyen/papercolor-theme'
" ---------------
" ----------------------------------------

" Lightline-Bufferline - отображение буферов в Lightline
" ---------------
" https://github.com/mengelbrecht/lightline-bufferline
Plug 'mengelbrecht/lightline-bufferline'
" ---------------
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#enable_devicons = 1
" clickable only for nvim
let g:lightline#bufferline#clickable = 1
" ----------------------------------------

" Lightline - строка статуса
" ---------------
" https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'
" ---------------
let g:lightline = {
	  \ 'tabline': {
	  \   'left': [ ['buffers'] ],
	  \   'right': [ ['close'], ['tabs'] ]
	  \ },
	  \ 'component_expand': {
	  \   'buffers': 'lightline#bufferline#buffers'
	  \ },
	  \ 'component_type': {
	  \   'buffers': 'tabsel'
	  \ },
	  \ 'component_raw': {
	  \   'buffers': 1
	  \ },
	  \ }
" ----------------------------------------

" Vim-Devicons - иконки Nerd
" ---------------
" https://github.com/ryanoasis/vim-devicons
Plug 'ryanoasis/vim-devicons'
" ---------------
" ----------------------------------------

" CSS Color - цвета css
" ---------------
" https://github.com/ap/vim-css-color
Plug 'ap/vim-css-color'
" ---------------
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Startify - стартовый экран
" ---------------
" https://github.com/mhinz/vim-startify
Plug 'mhinz/vim-startify'
" ---------------
" ----------------------------------------

" NERD Tree - файловый менеджер
" ---------------
" https://github.com/scrooloose/nerdtree
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" ---------------
" автоматически обновлять буфер после переименовывания файла
let NERDTreeAutoDeleteBuffer = 1
" показать скрытые файлы
let NERDTreeShowHidden = 1
" нумерация строк
let NERDTreeShowLineNumbers = 1
" открывать с правой стороны
let g:NERDTreeWinPos = "left"
" NERDTreeToggle - <Leader>op
map <Leader>op :NERDTreeToggle <CR>
" ----------------------------------------

" MRU - последние открытые файлы
" ---------------
" https://github.com/vim-scripts/mru.vim
Plug 'vim-scripts/mru.vim'
" ---------------
" <Leader>ol - показать список последних файлов
map <Leader>ol :MRU <CR>
" ----------------------------------------

" Buffer Explorer - переключение открытых буферов
" ---------------
" https://github.com/vim-scripts/bufexplorer.zip
Plug 'vim-scripts/bufexplorer.zip'
" ---------------
" <Leader>be - открыть Buffer Explorer
" <Leader>bs - открыть Buffer Explorer (горизонтально)
" <Leader>bv - открыть Buffer Explorer (вертикально)
" ----------------------------------------

" FZF - нечеткий поиск
" ---------------
" https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf.vim'
" ---------------
nmap <Leader>zz :FZF <CR>
" for close use Ctrl-c
" ---------------
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Auto Pairs - парные скобки и ковычки
" ---------------
" https://github.com/jiangmiao/auto-pairs
Plug 'jiangmiao/auto-pairs'
" ---------------
let g:AutoPairsShortcutToggle = '<Leader>pp'  " Toggle Autopairs
let g:AutoPairsShortcutFastWrap = ''  " Fast Wrap
let g:AutoPairsShortcutJump = ''  " Jump to next closed pair
let g:AutoPairsShortcutBackInsert = ''  " BackInsert
" ----------------------------------------

" NERD Commenter - комментирование для различных языков
" ---------------
" https://github.com/scrooloose/nerdcommenter
Plug 'scrooloose/nerdcommenter'
" ---------------
" отменить двойной комментарий
" let g:NERDDefaultNesting = 0
" добавить пробелы после комментария
let g:NERDSpaceDelims = 1
" изменение знака комментария
" \ 'lang': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
let g:NERDCustomDelimiters = {
    \ 'python': { 'left': '#'}
    \}
" комментировать
" [count]|<leader>|cc |NERDComComment|
" раскомментировать
" [count]|<Leader>|cu |NERDComUncommentLine|
" комментировать/раскомментировать
" [count]|<Leader>|c<space> |NERDComToggleComment|
" блочный форматированный комментарий
" [count]<leader>cs |NERDComSexyComment|
" смена комментировано на раскомментировано и наоборот
" [count]|<Leader>|ci |NERDComInvertComment|
" комментарий в конец строки
" |<Leader>|cA |NERDComAppendComment|
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" EasyMotion - простые перемещения
" ---------------
" https://github.com/easymotion/vim-easymotion
Plug 'easymotion/vim-easymotion'
" ---------------
" отключаем зависимость от регистра
let g:EasyMotion_smartcase = 1
" стандартные клавиши, где <Leader> - это <Leader><Leader>
" Default Mapping      | Details
"    ---------------------|----------------------------------------------
"    <Leader>f{char}      | Find {char} to the right. See |f|.
"    <Leader>F{char}      | Find {char} to the left. See |F|.
"    <Leader>t{char}      | Till before the {char} to the right. See |t|.
"    <Leader>T{char}      | Till after the {char} to the left. See |T|.
"    <Leader>w            | Beginning of word forward. See |w|.
"    <Leader>W            | Beginning of WORD forward. See |W|.
"    <Leader>b            | Beginning of word backward. See |b|.
"    <Leader>B            | Beginning of WORD backward. See |B|.
"    <Leader>e            | End of word forward. See |e|.
"    <Leader>E            | End of WORD forward. See |E|.
"    <Leader>ge           | End of word backward. See |ge|.
"    <Leader>gE           | End of WORD backward. See |gE|.
"    <Leader>j            | Line downward. See |j|.
"    <Leader>k            | Line upward. See |k|.
"    <Leader>n            | Jump to latest "/" or "?" forward. See |n|.
"    <Leader>N            | Jump to latest "/" or "?" backward. See |N|.
"    <Leader>s            | Find(Search) {char} forward and backward.
" ----------------------------------------

" Tagbar - окно-список тегов
" (нужен установленный ctags)
" список поддерживаемых языков
" ctags --list-languages
" список тегов для конкретного языка
" ctags --list-kinds=<Lang>
" ---------------
" https://github.com/majutsushi/tagbar
Plug 'majutsushi/tagbar'
" ---------------
nmap <Leader>tb :TagbarToggle<CR>
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 2
" ----------------------------------------

" Repeat - расширенный повтор по "."
" ---------------
" https://github.com/tpope/vim-repeat
Plug 'tpope/vim-repeat'
" ---------------
" ----------------------------------------

" Supertab - дополнение по <Tab>
" ---------------
" https://github.com/ervandew/supertab
Plug 'ervandew/supertab'
" ---------------
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" ----------------------------------------

" Matchit - перемещение по тегам HTML (%)
" Matchtag - подсветка тегов HTML
" " ---------------
" https://github.com/tmhedberg/matchit
" https://github.com/gregsexton/MatchTag
" ---------------
Plug 'tmhedberg/matchit', { 'for': 'html' }
Plug 'gregsexton/MatchTag', { 'for': 'html' }
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Polyglot - коллекция языковых пакетов для Vim
" ---------------
" https://github.com/sheerun/vim-polyglot
Plug 'sheerun/vim-polyglot'
" ---------------
" ----------------------------------------

" Xkbswitch - смена на En при переходе в командный режим
" ---------------
" библиотека
" https://github.com/ierton/xkb-switch - для *nix
" https://github.com/DeXP/xkb-switch-win - для Win
" https://github.com/myshov/xkbswitch-macosx - для Mac
" плагин
" https://github.com/lyokha/vim-xkbswitch
Plug 'lyokha/vim-xkbswitch'
" ---------------
let g:XkbSwitchEnabled = 1
let g:XkbSwitchIMappings = ['ru']
let g:XkbSwitchIMappingsTr = {
          \ 'ru':
          \ {'<': 'qwertyuiopasdfghjkl;zxcvbnm.`/'.
          \       'QWERTYUIOPASDFGHJKL:ZXCVBNM<>?~@#$^&|',
          \  '>': 'йцукенгшщзфывапролджячсмитьюё.'.
          \       'ЙЦУКЕНГШЩЗФЫВАПРОЛДЖЯЧСМИТЬБЮ,Ё"№;:?/'},
          \ }
" путь к библиотеке
	let g:XkbSwitchLib = '/usr/lib/libxkbswitch.so'
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" IDE
" ----------------------------------------

" Emmet
" ---------------
" https://github.com/mattn/emmet-vim
Plug 'mattn/emmet-vim'
" использование в режиме вставки: ,,
" ---------------
let g:user_emmet_mode='i'
let g:user_emmet_install_global = 0
autocmd FileType html,htmldjango,css EmmetInstall
let g:user_emmet_leader_key=','

let g:user_emmet_settings = {
\  'variables': {
\    'lang': 'ru',
\    'title': 'Django'
\    },
\  'html': {
\    'default_attributes': {
\      'option': {'value': v:null},
\      'textarea': {'id': v:null, 'name': v:null, 'cols': 10, 'rows': 10},
\    },
\    'snippets': {
\      'html:5': "<!DOCTYPE html>\n"
\              ."<html lang=\"${lang}\">\n"
\              ."<head>\n"
\              ."\t<meta charset=\"${charset}\">\n"
\              ."\t<title>${title}</title>\n"
\              ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
\              ."</head>\n"
\              ."<body>\n\t${child}|\n</body>\n"
\              ."</html>",
\    },
\  },
\}
" ----------------------------------------

" Black - форматирование кода Python
" для Neovim нужно: pip install pynvim
" ---------------
" https://github.com/psf/black
" Plug 'psf/black', { 'branch': 'stable', 'for': 'python' }
" ---------------
" nmap <Leader>bl :Black <CR>

" run Black on save
" augroup black_on_save
  " autocmd!
  " autocmd BufWritePre *.py Black
" augroup end
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" IDE for Vim
" ----------------------------------------

if !has('nvim')
	" ----------------------------------------
	" https://github.com/prabirshrestha/vim-lsp -- Async Language Server Protocol plugin for vim8 and neovim
	" https://github.com/mattn/vim-lsp-settings -- Auto configurations for Language Servers for vim-lsp

	" https://github.com/prabirshrestha/asyncomplete.vim -- Async autocompletion for Vim 8 and Neovim
	" https://github.com/prabirshrestha/asyncomplete-lsp.vim -- Provide Language Server Protocol autocompletion source
	" ---------------
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings'

	let g:lsp_diagnostics_float_cursor = 1

	function! s:on_lsp_buffer_enabled() abort
		setlocal omnifunc=lsp#complete
		setlocal signcolumn=yes
		if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

		nmap <buffer> K <plug>(lsp-hover)
		nmap <buffer> gd <plug>(lsp-definition)
		nmap <buffer> gi <plug>(lsp-implementation)

		" for symbol-search use ctrl-p, ctrl-n
		nmap <buffer> gs <plug>(lsp-document-symbol-search)
		nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
		nmap <buffer> gr <plug>(lsp-references)

		nmap <buffer> <space>rn <plug>(lsp-rename)

		nmap <buffer> <space>d <plug>(lsp-document-diagnostics)
		nmap <buffer> [d <plug>(lsp-previous-diagnostic)
		nmap <buffer> ]d <plug>(lsp-next-diagnostic)

		" nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
		" nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

		let g:lsp_format_sync_timeout = 1000
		autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
	endfunction

	augroup lsp_install
		au!
		" call s:on_lsp_buffer_enabled only for languages that has the server registered.
		autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
	augroup END

	Plug 'prabirshrestha/asyncomplete.vim'
	Plug 'prabirshrestha/asyncomplete-lsp.vim'

	" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
	" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
	inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" ----------------------------------------
endif

" ----------------------------------------
" ----------------------------------------

" IDE for Neovim
" Neovim Plugins for LSP Server
" настройки в конце файла

if has('nvim')
	" ----------------------------------------
	" https://github.com/neovim/nvim-lspconfig -- Collection of configurations for built-in LSP client
	" https://github.com/hrsh7th/cmp-nvim-lsp -- LSP source for nvim-cmp
	" https://github.com/hrsh7th/cmp-buffer -- nvim-cmp source for buffer words
	" https://github.com/hrsh7th/nvim-cmp -- Autocompletion plugin

	" https://github.com/rafamadriz/friendly-snippets -- Snippets collection

	" https://github.com/saadparwaiz1/cmp_luasnip -- Snippets source for nvim-cmp
	" https://github.com/L3MON4D3/LuaSnip -- Snippets plugin
	" ---------------
	Plug 'neovim/nvim-lspconfig'
	Plug 'hrsh7th/cmp-nvim-lsp'
	Plug 'hrsh7th/cmp-buffer'
	Plug 'hrsh7th/nvim-cmp'

	" Plug 'rafamadriz/friendly-snippets'

	Plug 'L3MON4D3/LuaSnip'
	Plug 'saadparwaiz1/cmp_luasnip'
	" ----------------------------------------
endif

" ----------------------------------------
" ----------------------------------------

" Initialize plugin system
call plug#end()

" ----------------------------------------
" ----------------------------------------

" Цветовая схема
" ---------------

" настройка цветовой схемы
colorscheme desert
" прозрачность
highlight Normal guibg=NONE ctermbg=NONE

" цвет шрифта при проверке орфографии
" красный цвет - орфографические ошибки
highlight clear SpellBad
highlight SpellBad ctermfg=Red
" синий цвет - отсутствие заглавной буквы
highlight clear SpellCap
highlight SpellCap ctermfg=Blue

" ----------------------------------------
" ----------------------------------------

" Help Some Keybinding
" ---------------

" ----------------------------------------
" eVim - перейти в normal mode: ctrl-l
" ----------------------------------------
" автодополнения i_ctrl-x_
" ctrl-l - добавить строку
" ctrl-n ctrl-p ctrl-i - добавить слово
" ctrl-f - добавить имя файла
" ctrl-o - добавить из языка (автодополнение)
" ----------------------------------------
" ~, U, u - изменение регистра
" :%s/\<./\u&/g - Первая Буква Строчная
" ----------------------------------------
" gv - повторное выделение
" gx - открыть ссылку в браузере
" ----------------------------------------
" gt - следующая вкладка
" ctrl-w + T - перенести split на другую вкладку
" ----------------------------------------
" ctrl-w + q - закрыть окно(сплит) (буфер открыт)
" ctrl-w + o - закрыть другие сплиты
" ctrl-w + s - открыть split
" ctrl-w + v - открыть vsplit
" ctrl-w + r - поменять окна(сплиты) местами
" ctrl-w + H(L) - поменять split на verical
" ctrl-w + K(J) - поменять verical на split
" :[vertical] sb<num_buffer> - vsplit|split по номеру буфера
" ----------------------------------------
" ctrl-e и ctrl-y - экран вниз/вверх с сохранением курсора
" ctrl-d и ctrl-u - экран на половину вниз/вверх
" ----------------------------------------
" m<letter> - создать закладку
" '<letter> - перейти к началу строки закладки
" `<letter> - перейти к закладке
" ----------------------------------------
"  '] `] - перемещение в конец после копирования
" '' или `` - перемещение на предыдущее место
" :jumps история перемещений
" ctrl-o и ctrl-i - перемещение по истории
" ----------------------------------------
" ctrl-] и ctrl-t - перемещение по топикам Помощи
" ----------------------------------------
" q<letter> - создание макроса, закончить q
" @<letter> - вызов макроса
" ----------------------------------------
" v/V и zf - выделение блока и создание свертки
" zc – свернуть блок
" zo – развернуть блок
" za – инвертирование
" zm - свернуть все свертки
" zr - развернуть все свертки
" zi - инвертировть все свертки
" zd - удалить свертку
" zk - переход на свертку выше по тексту
" zj - переход на свертку ниже по тексту
" :mkview - сохранить структуру сверток
" :loadview - загрузить структуру сверток
" ----------------------------------------
" :mksession[!] [filename] - сохранить сессию
" :source [filename] - загрузить сессию
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

