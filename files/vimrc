" ----------------------------------------
" vimrc by Koljasha
" ----------------------------------------

" Основные настройки
" ---------------

" убираем совместимость с vi
set nocompatible

" автоматически обновлять файл при его изменении
set autoread

" отключение бекапов
set nobackup

" отключение swap-файлы
set noswapfile

" не выгружать буфер, когда переключаемся на другой файл
set hidden

" .vimrc из каталога запуска
" set exrc
" set secure

" определение типа файла
filetype plugin indent on
" list filetypes:
" :echo glob($VIMRUNTIME . '/syntax/*.vim')
" :echo glob($VIMRUNTIME . '/ftplugin/*.vim')

" мышь во всех режимах
set mouse=a

" подсветка синтаксиса
syntax on

" цветовая схема - (через плагин)
set background=dark

" нумерация строк
set number

" показывать относительные номера строк
set relativenumber

" показывать имя буфера в заголовке терминала
set title

" показывать строку с позицией курсора
set ruler

" включаем отображение команды
set showcmd

" показывать первую парную скобку после ввода второй
" set showmatch

" включить подсветку невидимых символов
set list

" табы и пробелы
set listchars=trail:.,tab:--

" 4 пробела на tab
set expandtab
set tabstop=4

" размер сдвига при нажатии на клавиши "<" и ">"
set shiftwidth=4

" включаем умную автоматическую расстановку отступов
set smartindent

" наследовать отступы предыдущей строки
set autoindent

" подсветка текущей строки
" set cursorline
" highlight cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

" всегда показывать строку статуса
set laststatus=2

" описание строки статуса - (через плагин)
" set statusline=%<%r%m\ %f:%y\ %=\ %-15(%l,%c:%v\ %p%%%)
" set statusline+=\ %{strftime(\"%H:%M\ %d.%m.%Y\ %a\")}

" показывать строку вкладок всегда
set showtabline=2

" 256 цветов
set t_Co=256

" Линия по колонке
" set colorcolumn=180

" включаем перенос строк
set wrap

" перенос по словам, а не по буквам
set linebreak

" автозавершение команд в командной строке
set wildmenu
set wcm=<TAB>

" вывести весь список сразу доступных вариантов
" set wildmode=list:longest,full

" подсветка поиска
set hlsearch

" автопоиск первого совпадения
set incsearch

" останавливать поиск при достижении конца файла
" set nowrapscan

" игнорировать регистр букв при поиске
set ignorecase

" кодировка по умолчанию
set encoding=utf-8
set termencoding=utf-8

" список кодировок файлов для авто-определения
" set fileencodings=utf-8,koi8-r,cp1251,cp866

" :vsplit открывает окна справа
set splitright

" :split открывает окна снизу
set splitbelow

" сворачивание на основании отступов в начале строк
" set foldmethod=indent

" для корректной работы Vim в Alacritty
if !has('nvim')
	set term=xterm-256color
endif

" ----------------------------------------
" ----------------------------------------

" Горячие клавиши
" ---------------

" если не работает Alt-key or Meta-key в терминале (пример для q)
" execute "set <M-q>=\eq" или использовать Vim-Fixkey

" меняем mapleader на ",", по умолчанию - "\"
let mapleader=","
" устанавливаем задержку после нажатия
set timeoutlen=5000 ttimeoutlen=0

" help по слову при нажатии K
let &keywordprg=':help'

" <Leader>hl - отключение подсветки поиска hlsearch
nmap <Leader>hl :nohlsearch <CR>

" <Leader>ss - сохранение файла
nmap <Leader>ss :w! <CR>

" <Leader>qq - закрытие буфера без сохранения
nmap <Leader>qq :bd! <CR>
" <Leader>bb - следующий буфер
nmap <Leader>bb :bn <CR>

" сменить split
nmap <C-Right> <C-W>l
nmap <C-Left> <C-W>h
nmap <C-Up> <C-W>k
nmap <C-Down> <C-W>j

" изменить размера split
nmap <C-S-Right> <C-W>>
nmap <C-S-Left> <C-W><
nmap <C-S-Up> <C-W>+
nmap <C-S-Down> <C-W>-

" F4 - ражим вставки (Paste)
nmap <F4> :set paste! <CR>
imap <F4> <Esc> :set paste! <CR>

" F5 - сохранение файла
nmap <F5> :w! <CR>
imap <F5> <Esc> :w! <CR>
" Shift-F5 - сохранить с sudo
nmap <S-F5> :execute ':silent w !sudo tee % > /dev/null' <bar> :edit! <CR>

" F6 - сохранить свертки
" nmap <F6> :mkview <CR>
" Shift-F6 - загрузить свертки
" nmap <S-F6> :loadview <CR>

" F7 - показать пробелы и табы
nmap <F7> :set list! <CR>
" Shift-F7 - использовать табы вместо пробелов
nmap <S-F7> :set noet! <CR>

" F8 - отключение нумерации
nmap <F8> :set number! relativenumber! <CR>
" Shift-F8 - относительная нумерация
nmap <S-F8> :set relativenumber! <CR>

" F9 - отключение мыши
nmap <F9> :set mouse= <CR>
" Shift-F9 - включение мыши
nmap <S-F9> :set mouse=a <CR>

" F11 - проверка орфографии
" map <F11> :setlocal spelllang=ru spell! <CR> 
" ]s - следующее слово с ошибкой
" [s - предыдущее слово с ошибкой
" z= - замена из списка
" zg - добавить в словарь
" zw - убрать из словаря:
" zG - игнорировать слово:

" F12 - полная русская раскладка (на выборе English)
" map <F12> :set keymap=russian-jcukenwin <CR>
" imap <F12> <Esc>:set keymap=russian-jcukenwin<CR>i
" map <S-F12> :set keymap= <CR>
" imap <S-F12> <Esc>:set keymap=<CR>i

" ----------------------------------------
" Help Some Keybinding
" ----------------------------------------
" ----------------------------------------
" копировать в системный буфер обмена:
" выделить, далее "+y
" ----------------------------------------
" автодополнения i_ctrl-x_:
" ctrl-l - добавить строку
" ctrl-n ctrl-p ctrl-i - добавить слово
" ctrl-f - добавить имя файла
" ctrl-o - добавить из языка (автодополнение)

" eVim - перейти в normal mode: ctrl-l
" ----------------------------------------
" ~, U, u - изменение регистра
" :%s/\<./\u&/g - Первая Буква Строчная
" ----------------------------------------
" gx - открыть ссылку в браузере
" gt - следующая вкладка
" ----------------------------------------
" ctrl-] и ctrl-t - перемещение по топикам Помощи
" ----------------------------------------
" :jumps история перемещений
" ctrl-o и ctrl-i - перемещение по истории
" ----------------------------------------
" ctrl-d и ctrl-u - экран на полавину вниз/вверх
" ----------------------------------------
" v/V и zf - выделение блока и создание свертки
" zc – свернуть блок
" zo – развернуть блок
" za – инвертирование
" zd - удалить свертку
" :mkview - сохранить структуру сверток
" :loadview - загрузить структуру сверток
" ----------------------------------------
" :mksession[!] [filename] - сохранить сессию
" :source [filename] - загрузить сессию
" ----------------------------------------
" ----------------------------------------

" Плагины
" ---------------
" Vim-plug - менеджер плагинов

" ---------------
" PaperColor - цветовая схема
" Lightline-Bufferline - отображение буферов в Lightline
" Lightline - строка статуса
" Vim-Devicons - иконки Nerd

" Startify - стартовый экран
" NERD Tree - файловый менеджер
" MRU - последние открытые файлы
" Buffer Explorer - переключение открытых буферов
" Ctrlp - нечеткий поиск

" Auto Pairs - парные скобки и ковычки
" NERD Commenter - комментирование для различных языков

" EasyMotion - простые перемещения
" Tagbar - окно-список тегов
" Repeat - расширенный повтор по "."
" Supertab - дополнение по <Tab>
" Matchit - перемещение по тегам HTML (%) (для HTML)
" Matchtag - подсветка тегов HTML (для HTML)

" Polyglot - коллекция языковых пакетов для Vim
" Xkbswitch - смена на En при переходе в командный режим
" ----------------------------------------
" IDE for Vim
	" отключен - Jedi-vim - IDE для Python (для Python)
	" отключен - Snippets - набор сниппетов
	" отключен - (UltiSnips - движок для сниппетов)
	" отключен - Syntastic - синтаксические ошибки кода
" ----------------------------------------
" IDE for Neovim
" ----------------------------------------
" ----------------------------------------

" Vim-plug - менеджер плагинов
" ---------------
" https://github.com/junegunn/vim-plug
" Reload .vimrc and :PlugInstall to install plugins
" --------------

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')
" ----------------------------------------
" ----------------------------------------

" PaperColor - цветовая схема:
" ---------------
" https://github.com/NLKNguyen/papercolor-theme
Plug 'nlknguyen/papercolor-theme'
" ---------------
" ----------------------------------------

" Lightline-Bufferline - отображение буферов в Lightline
" !!! - 4 строк ниже:
" ---------------
" https://github.com/mengelbrecht/lightline-bufferline
Plug 'mengelbrecht/lightline-bufferline'
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#enable_devicons = 1
" ----------------------------------------

" Lightline - строка статуса
" !!! - 14 строк ниже:
" ---------------
" https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'
let g:lightline = {
	  \ 'tabline': {
	  \   'left': [ ['buffers'] ],
	  \   'right': [ ['close'], ['tabs'] ]
	  \ },
	  \ 'component_expand': {
	  \   'buffers': 'lightline#bufferline#buffers'
	  \ },
	  \ 'component_type': {
	  \   'buffers': 'tabsel'
	  \ },
	  \ }
" ----------------------------------------

" Vim-Devicons - иконки Nerd
" ---------------
" https://github.com/ryanoasis/vim-devicons
" ---------------
Plug 'ryanoasis/vim-devicons'
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Startify - стартовый экран
" ---------------
" https://github.com/mhinz/vim-startify
Plug 'mhinz/vim-startify'
" ---------------
" ----------------------------------------

" NERD Tree - файловый менеджер
" ---------------
" https://github.com/scrooloose/nerdtree
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" ---------------
" автоматически обновлять буфер после переименовывания файла
let NERDTreeAutoDeleteBuffer = 1
" показать скрытые файлы
let NERDTreeShowHidden = 1
" нумерация строк
let NERDTreeShowLineNumbers = 1
" открывать с правой стороны
let g:NERDTreeWinPos = "left"
" NERDTreeToggle - <Leader>op
map <Leader>op :NERDTreeToggle <CR>
" ----------------------------------------

" MRU - последние открытые файлы
" ---------------
" https://github.com/vim-scripts/mru.vim
Plug 'vim-scripts/mru.vim'
" ---------------
" <Leader>oo - показать список последних файлов
map <Leader>oo :MRU <CR>
" ----------------------------------------

" Buffer Explorer - переключение открытых буферов
" ---------------
" https://github.com/vim-scripts/bufexplorer.zip
Plug 'vim-scripts/bufexplorer.zip'
" ---------------
" <Leader>be - открыть Buffer Explorer
" <Leader>bs - открыть Buffer Explorer (горизонтально)
" <Leader>bv - открыть Buffer Explorer (вертикально)
" ----------------------------------------

" Ctrlp - нечеткий поиск
" !!! - 7 строк ниже:
" ---------------
" https://github.com/ctrlpvim/ctrlp.vim
Plug 'ctrlpvim/ctrlp.vim'
" ---------------
let g:ctrlp_map = '<Leader>cp'
let g:ctrlp_by_filename = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'rc'
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Auto Pairs - парные скобки и ковычки
" !!! - 2 строк ниже:
" ---------------
" https://github.com/jiangmiao/auto-pairs
Plug 'jiangmiao/auto-pairs'
" ---------------
let g:AutoPairsShortcutToggle = '<Leader>pp'  " Toggle Autopairs
let g:AutoPairsShortcutFastWrap = ''  " Fast Wrap
let g:AutoPairsShortcutJump = ''  " Jump to next closed pair
let g:AutoPairsShortcutBackInsert = ''  " BackInsert
" ----------------------------------------

" NERD Commenter - комментирование для различных языков
" ---------------
" https://github.com/scrooloose/nerdcommenter
Plug 'scrooloose/nerdcommenter'
" ---------------
" отменить двойной комментарий
" let g:NERDDefaultNesting = 0
" добавить пробелы после комментария
let g:NERDSpaceDelims = 1
" изменение знака комментария
" \ 'lang': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
let g:NERDCustomDelimiters = {
    \ 'python': { 'left': '#'}
    \}
" комментировать:
" [count]|<leader>|cc |NERDComComment|
" раскомментировать:
" [count]|<Leader>|cu |NERDComUncommentLine|
" комментировать/раскомментировать :
" [count]|<Leader>|c<space> |NERDComToggleComment|
" блочный форматированный комментарий:
" [count]<leader>cs |NERDComSexyComment|
" смена комментировано на раскомментировано и наоборот:
" [count]|<Leader>|ci |NERDComInvertComment|
" комментарий в конец строки:
" |<Leader>|cA |NERDComAppendComment|
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" EasyMotion - простые перемещения
" !!! - 25 строк ниже:
" ---------------
" https://github.com/easymotion/vim-easymotion
Plug 'easymotion/vim-easymotion'
" ---------------
" отключаем зависимость от регистра
let g:EasyMotion_smartcase = 1
" стандартные клавиши, где <Leader> - это <Leader><Leader>
" Default Mapping      | Details
"    ---------------------|----------------------------------------------
"    <Leader>f{char}      | Find {char} to the right. See |f|.
"    <Leader>F{char}      | Find {char} to the left. See |F|.
"    <Leader>t{char}      | Till before the {char} to the right. See |t|.
"    <Leader>T{char}      | Till after the {char} to the left. See |T|.
"    <Leader>w            | Beginning of word forward. See |w|.
"    <Leader>W            | Beginning of WORD forward. See |W|.
"    <Leader>b            | Beginning of word backward. See |b|.
"    <Leader>B            | Beginning of WORD backward. See |B|.
"    <Leader>e            | End of word forward. See |e|.
"    <Leader>E            | End of WORD forward. See |E|.
"    <Leader>ge           | End of word backward. See |ge|.
"    <Leader>gE           | End of WORD backward. See |gE|.
"    <Leader>j            | Line downward. See |j|.
"    <Leader>k            | Line upward. See |k|.
"    <Leader>n            | Jump to latest "/" or "?" forward. See |n|.
"    <Leader>N            | Jump to latest "/" or "?" backward. See |N|.
"    <Leader>s            | Find(Search) {char} forward and backward.
" ----------------------------------------

" Tagbar - окно-список тегов
" (нужен установленный ctags)
" список поддерживаемых языков
" ctags --list-languages
" список тегов для конкретного языка
" ctags --list-kinds=<Lang>
" !!! - 6 строк ниже:
" ---------------
" https://github.com/majutsushi/tagbar
Plug 'majutsushi/tagbar'
" ---------------
nmap <Leader>tt :TagbarToggle<CR>
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 2
" ----------------------------------------

" Repeat - расширенный повтор по "."
" ---------------
" https://github.com/tpope/vim-repeat
Plug 'tpope/vim-repeat'
" ---------------
" ----------------------------------------

" Supertab - дополнение по <Tab>
" ---------------
" https://github.com/ervandew/supertab
Plug 'ervandew/supertab'
" ---------------
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" ----------------------------------------

" Matchit - перемещение по тегам HTML (%)
" Matchtag - подсветка тегов HTML
" " ---------------
" https://github.com/tmhedberg/matchit
" https://github.com/gregsexton/MatchTag
" !!! - 2 строк ниже:
" ---------------
Plug 'tmhedberg/matchit', { 'for': 'html' }
Plug 'gregsexton/MatchTag', { 'for': 'html' }
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" Polyglot - коллекция языковых пакетов для Vim
" ---------------
" https://github.com/sheerun/vim-polyglot
Plug 'sheerun/vim-polyglot'
" ---------------
" ----------------------------------------

" Xkbswitch - смена на En при переходе в командный режим
" ---------------
" библиотека:
" https://github.com/ierton/xkb-switch - для *nix
" https://github.com/DeXP/xkb-switch-win - для Win 
" https://github.com/myshov/xkbswitch-macosx - для Mac
" плагин:
" https://github.com/lyokha/vim-xkbswitch
Plug 'lyokha/vim-xkbswitch'
" ---------------
let g:XkbSwitchEnabled = 1 
let g:XkbSwitchIMappings = ['ru']
" путь к библиотеке
	let g:XkbSwitchLib = '/usr/lib/libxkbswitch.so'
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" IDE for Vim

" ----------------------------------------
" https://github.com/neoclide/coc.nvim/wiki
" https://github.com/fannheyward/coc-pyright
" https://github.com/pappasam/coc-jedi
" ----------------------------------------

" Jedi-vim - IDE для Python
" !!! - 12 строк ниже:
" " ---------------
" " https://github.com/davidhalter/jedi-vim
" " (требуется установленный jedi)
" " $ pip install jedi
" Plug 'davidhalter/jedi-vim', { 'for': 'python' }
" " ---------------
" " Completion <C-Space>
" " Goto assignments <leader>g (typical goto function)
" " Goto definitions <leader>d (follow identifier as far as possible, includes imports and statements)
" " Show Documentation/Pydoc K (shows a popup with assignments)
" " Renaming <leader>r
" " Usages <leader>n (shows all the usages of a name)
" " Open module, e.g. :Pyimport os (opens the os module)
" ----------------------------------------

" Snippets - набор сниппетов
" UltiSnips - движок для сниппетов
" !!! - 12 строк ниже:
" " ---------------
" " https://github.com/honza/vim-snippets
" Plug 'honza/vim-snippets'
" " https://github.com/sirver/ultisnips
" Plug 'sirver/ultisnips'
" " ---------------
" " вставить сниппет
" let g:UltiSnipsExpandTrigger = "<c-a>"
" " перемещение по сниппету
" let g:UltiSnipsJumpForwardTrigger = "<c-j>"
" let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
" " список сниппетов для слова
" let g:UltiSnipsListSnippets = "<m-w>"
" ----------------------------------------

" Syntastic - синтаксические ошибки кода
" !!! - 16 строк ниже:
" " ---------------
" " https://github.com/vim-syntastic/syntastic
" Plug 'vim-syntastic/syntastic'
" " ---------------
" " проверка при сохранении/открытии (кроме ZZ, :wq и :x)
" " set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" " отключение / включение
" map <Leader>sy :SyntasticToggleMode <CR>
" " : SyntasticInfo - доступные / активные чекеры
" " : help syntastic-checkers - информация по чекерам
" " let g:syntastic_<filetype>_checkers = ['<checker-name-1>','<checker-name-2>']
" ----------------------------------------

" ----------------------------------------
" ----------------------------------------

" IDE for Neovim
" Neovim Plugins for LSP Server
" настройки в конце файла

if has('nvim')
	" settings from: https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion
	" ----------------------------------------
	" https://github.com/neovim/nvim-lspconfig -- Collection of configurations for built-in LSP client
	" https://github.com/hrsh7th/cmp-nvim-lsp -- LSP source for nvim-cmp
	" https://github.com/hrsh7th/cmp-buffer -- nvim-cmp source for buffer words
	" https://github.com/hrsh7th/nvim-cmp -- Autocompletion plugin

	" https://github.com/rafamadriz/friendly-snippets -- Snippets collection

	" https://github.com/saadparwaiz1/cmp_luasnip -- Snippets source for nvim-cmp
	" https://github.com/L3MON4D3/LuaSnip -- Snippets plugin
	" ---------------
	Plug 'neovim/nvim-lspconfig'
	Plug 'hrsh7th/cmp-nvim-lsp'
	Plug 'hrsh7th/cmp-buffer'
	Plug 'hrsh7th/nvim-cmp'

	" Plug 'rafamadriz/friendly-snippets'

	Plug 'L3MON4D3/LuaSnip'
	Plug 'saadparwaiz1/cmp_luasnip'
	" ----------------------------------------
endif

" ----------------------------------------
" ----------------------------------------

" Initialize plugin system
call plug#end()

" ----------------------------------------
" ----------------------------------------

" Цветовая схема
" ---------------

" настройка цветовой схемы
colorscheme desert
" прозрачность
highlight Normal guibg=NONE ctermbg=NONE

" цвет шрифта при проверке орфографии
" красный цвет - орфографические ошибки
highlight clear SpellBad
highlight SpellBad ctermfg=Red
" синий цвет - отсутствие заглавной буквы
highlight clear SpellCap 
highlight SpellCap ctermfg=Blue

" ----------------------------------------
" ----------------------------------------

" Neovim LSP Settings

if has('nvim')
" ----------------------------------------
" nvim-lspconfig
" settings from https://github.com/neovim/nvim-lspconfig
" ---------------
" nvim-cmp
" settings from: https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion
" ---------------

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Add additional capabilities supported by nvim-cmp
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches

-- !!! Need install LSP Server
-- https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md
-- >sudo npm i -g pyright
-- >sudo npm i -g bash-language-server

local servers = { 'pyright', 'bashls' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    }
  }
end

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- luasnip setup
local luasnip = require 'luasnip'

-- nvim-cmp setup
local cmp = require 'cmp'
cmp.setup {
--  completion = {
--    autocomplete = false
--  },
  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end,
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end,
    ['<S-Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end,
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    { name = 'buffer' },
  },
}

-- for example:
-- cp ~/.vim/plugged/LuaSnip/Examples/snippets.lua\
--    ~/.config/nvim/lua/snippets.lua
   require("snippets")

-- load snippets collection "rafamadriz/friendly-snippets"
-- require("luasnip/loaders/from_vscode").lazy_load()

EOF
endif
" ----------------------------------------
" ----------------------------------------

